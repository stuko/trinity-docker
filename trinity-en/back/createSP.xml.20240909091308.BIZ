<?xml version="1.0" encoding="utf-8"?><xml PATH="/home/java/trinity/trinity-en/WEB-INF/Anaconda/BizDir/dev.smartsdlc.com/createSP.xml" USER="null" id="createSP"><createSP AnacondaRule="null" BIZ_COLLECTION_CACHE_TIME="0" BIZ_COLLECTION_COUNT="1" BIZ_COLLECTION_KOR_NAME="DUNA 스토어드프로시져 생성" COLLECTION_INTERCEPTER="" KIND="COLLECTION" aop_intercepter="" aop_point_class="" aop_point_method="" business_rule="null" id="createSP" referenceKey="null"><dropSP DATASOURCE="session.jndi" KIND="DATA" OWNER="sa" REMOTE="false" SERVICE_NAME="DROP PROCEDURE IF EXISTS AUTO_PLAN_RULE;&lt;BR&gt;DROP EVENT IF EXISTS cleaning_by_day ;&lt;BR&gt;DROP FUNCTION IF EXISTS  GEN_KEY;&lt;BR&gt;DROP PROCEDURE IF EXISTS  CREATE_INTENT;&lt;BR&gt;select 1;&lt;BR&gt;" TYPE="SQL">
</dropSP><createSP DATASOURCE="session.jndi" KIND="DATA" OWNER="sa" REMOTE="false" SERVICE_NAME="CREATE PROCEDURE  IF NOT EXISTS  AUTO_PLAN_RULE()&lt;BR&gt;BEGIN&lt;BR&gt;  DECLARE done INT DEFAULT FALSE;&lt;BR&gt;  DECLARE v_count INT DEFAULT 0;&lt;BR&gt;  DECLARE v_tmp_seq INT DEFAULT 0;&lt;BR&gt;  DECLARE v_key VARCHAR(50);&lt;BR&gt;  DECLARE v_tmp_key VARCHAR(50) DEFAULT 'NULL';&lt;BR&gt;  DECLARE v_seq INT;&lt;BR&gt;  DECLARE v_parent_seq INT DEFAULT -1;&lt;BR&gt;  DECLARE v_rl_seq INT;&lt;BR&gt;  DECLARE v_title VARCHAR(255);&lt;BR&gt;  DECLARE v_desc TEXT;&lt;BR&gt;  DECLARE v_count2 INT DEFAULT 0;&lt;BR&gt;  DECLARE v_key2 VARCHAR(50);&lt;BR&gt;  DECLARE v_tmp_seq2 INT DEFAULT 0;&lt;BR&gt;  DECLARE v_tmp_key2 VARCHAR(50) DEFAULT 'NULL';&lt;BR&gt;  DECLARE v_seq2 INT;&lt;BR&gt;  DECLARE v_parent_seq2 INT DEFAULT -1;&lt;BR&gt;  DECLARE v_rl_seq2 INT;&lt;BR&gt;  DECLARE v_title2 VARCHAR(255);&lt;BR&gt;  DECLARE v_desc2 TEXT;&lt;BR&gt;    &lt;BR&gt;   DECLARE cursor1 CURSOR FOR &lt;BR&gt;   SELECT   PL_KEY, PL_SEQ, RL_SEQ, PL_TITLE, PL_TEXT&lt;BR&gt;   FROM     PLAN&lt;BR&gt;   WHERE    RL_SEQ IS NULL&lt;BR&gt;   ORDER BY PL_KEY, PL_SEQ;&lt;BR&gt;&lt;BR&gt;  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;&lt;BR&gt;&lt;BR&gt;  OPEN cursor1;&lt;BR&gt;  &lt;BR&gt;  my_loop: LOOP &lt;BR&gt;    FETCH cursor1 INTO   v_key , v_seq , v_rl_seq , v_title , v_desc;&lt;BR&gt;    IF done THEN&lt;BR&gt;      LEAVE my_loop;&lt;BR&gt;    END IF;&lt;BR&gt;    IF v_seq = 0 THEN &lt;BR&gt;      SET v_parent_seq = -1;&lt;BR&gt;    END IF;  &lt;BR&gt;&lt;BR&gt;    CALL CREATE_INTENT(v_title);&lt;BR&gt;&lt;BR&gt;    INSERT INTO rule_context(context_name, rule, parent_seq, context_desc, msg, kind, rule_group, rule_condition, delimeter) &lt;BR&gt;    VALUES (v_title, CONCAT('intentLike(&quot;',v_title,'&quot;,70)'), v_parent_seq, v_desc, CONCAT(v_desc,' ',' prepare... ') , 'MSG' , v_key , 0 , '|');&lt;BR&gt;&lt;BR&gt;    SET v_tmp_seq = LAST_INSERT_ID();&lt;BR&gt;    IF v_count != 0 THEN&lt;BR&gt;      INSERT INTO rule_relation(parent_key, child_key)&lt;BR&gt;      VALUES(v_parent_seq, v_tmp_seq);&lt;BR&gt;    END IF;&lt;BR&gt;    SET v_count = 1;&lt;BR&gt;    &lt;BR&gt;    SET v_parent_seq = v_tmp_seq;&lt;BR&gt;    UPDATE PLAN &lt;BR&gt;    SET    RL_SEQ = v_parent_seq&lt;BR&gt;    WHERE  PL_KEY = v_key &lt;BR&gt;    AND    PL_SEQ = v_seq; &lt;BR&gt;    SET v_tmp_key = v_key;&lt;BR&gt;&lt;BR&gt;    IF v_tmp_seq2 != 0 THEN&lt;BR&gt;      UPDATE rule_context&lt;BR&gt;      SET    child_seq = v_tmp_seq&lt;BR&gt;      WHERE  seq       = v_tmp_seq2;&lt;BR&gt;    END IF;&lt;BR&gt;&lt;BR&gt;    SET v_tmp_seq2 = 0;&lt;BR&gt;    BEGIN&lt;BR&gt;  DECLARE cursor2 CURSOR FOR &lt;BR&gt;          SELECT   SPL_KEY, SPL_SEQ, RL_SEQ, SPL_TITLE, SPL_TEXT&lt;BR&gt;   FROM     SB_PLAN&lt;BR&gt;   WHERE    PL_KEY = v_key&lt;BR&gt;   AND      PL_SEQ = v_seq&lt;BR&gt;   ORDER BY SPL_SEQ;&lt;BR&gt;  &lt;BR&gt;         OPEN cursor2;&lt;BR&gt;  my_loop2: LOOP&lt;BR&gt;    FETCH cursor2 INTO   v_key2 , v_seq2 , v_rl_seq2 , v_title2 , v_desc2;&lt;BR&gt;    &lt;BR&gt;           IF done THEN&lt;BR&gt;      LEAVE my_loop2;&lt;BR&gt;    END IF;&lt;BR&gt;    &lt;BR&gt;    IF v_seq2 = 0 THEN &lt;BR&gt;      SET v_parent_seq2 = -1;&lt;BR&gt;    END IF;&lt;BR&gt;    &lt;BR&gt;    CALL CREATE_INTENT(v_title2);&lt;BR&gt;&lt;BR&gt;     INSERT INTO rule_context(context_name, rule, parent_seq, context_desc, msg, kind, rule_group, rule_condition, delimeter) &lt;BR&gt;    VALUES (v_title2, CONCAT('intentLike(&quot;',v_title2,'&quot;,70)'), v_parent_seq2, v_desc2, CONCAT(v_desc2,' ',' prepare... ') , 'MSG' , v_key2 , 0 , '|');&lt;BR&gt;    &lt;BR&gt;           SET v_tmp_seq2 = LAST_INSERT_ID();&lt;BR&gt;           &lt;BR&gt;           IF v_count2 != 0 THEN&lt;BR&gt;              INSERT INTO rule_relation(parent_key, child_key)&lt;BR&gt;              VALUES(v_parent_seq2, v_tmp_seq2);&lt;BR&gt;           END IF;&lt;BR&gt;           SET v_count2 = 1;&lt;BR&gt;           SET v_parent_seq2 = v_tmp_seq2;&lt;BR&gt;    SET v_tmp_key2 = v_key2;&lt;BR&gt;    &lt;BR&gt;           IF v_seq2 = 0 THEN&lt;BR&gt;      UPDATE rule_context&lt;BR&gt;      SET    child_seq = v_parent_seq2&lt;BR&gt;      WHERE  seq = v_parent_seq;&lt;BR&gt;    END IF;&lt;BR&gt;&lt;BR&gt;  END LOOP;&lt;BR&gt;&lt;BR&gt;    END;&lt;BR&gt;    SET done = FALSE;&lt;BR&gt;  END LOOP;&lt;BR&gt;  CLOSE cursor1;&lt;BR&gt;  SELECT v_count; &lt;BR&gt;END&lt;BR&gt;" TYPE="SQL">
</createSP><createEvent DATASOURCE="session.jndi" KIND="DATA" OWNER="sa" REMOTE="false" SERVICE_NAME="DROP EVENT if exists cleaning_by_day;&lt;BR&gt;&lt;BR&gt;create event if not exists cleaning_by_day on SCHEDULE EVERY 1 HOUR ENABLE&lt;BR&gt;  DO &lt;BR&gt;  DELETE FROM container_hist&lt;BR&gt;  WHERE create_datetime &lt; CURRENT_TIMESTAMP - INTERVAL 1 HOUR;&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_rule_context_hist_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT if not exists delete_rule_context_hist_event&lt;BR&gt;ON SCHEDULE EVERY 1 HOUR&lt;BR&gt;STARTS '2022-03-05 16:38:37.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete FROM rule_context_hist&lt;BR&gt;   where create_datetime &lt; date_add(NOW(),INTERVAL -1 HOUR);&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_profile_history_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT if not exists delete_profile_history_event&lt;BR&gt;ON SCHEDULE EVERY 1 HOUR&lt;BR&gt;STARTS '2022-03-05 16:38:37.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO Delete FROM profile_history &lt;BR&gt;   where create_datetime &lt; date_add(NOW(),INTERVAL -1 HOUR);&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_coin_slope_stats;&lt;BR&gt;&lt;BR&gt;CREATE EVENT if not exists delete_coin_slope_stats&lt;BR&gt;ON SCHEDULE EVERY 1 HOUR&lt;BR&gt;STARTS '2022-03-05 16:38:37.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete FROM coin_slope_stats&lt;BR&gt;   where date &lt; date_format(date_add(NOW(),INTERVAL -1 HOUR),'%Y%m%d');&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_coin;&lt;BR&gt;&lt;BR&gt;CREATE EVENT if not exists delete_coin&lt;BR&gt;ON SCHEDULE EVERY 1 HOUR&lt;BR&gt;STARTS '2022-03-05 16:38:37.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete FROM coin&lt;BR&gt;   where date &lt; date_format(date_add(NOW(),INTERVAL -1 HOUR),'%Y%m%d');&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_rest_history_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT delete_rest_history_event&lt;BR&gt;ON SCHEDULE EVERY 10 HOUR&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete FROM rest_history&lt;BR&gt;   where create_datetime &lt; date_add(NOW(),INTERVAL -1 HOUR);&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_coin_slope_stats_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT delete_coin_slope_stats_event&lt;BR&gt;ON SCHEDULE EVERY 24 HOUR&lt;BR&gt;STARTS '2023-10-30 08:36:56.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete from   coin_slope_stats&lt;BR&gt;where  date &lt;= date_add(now(), interval -3 day);&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists delete_coin_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT delete_coin_event&lt;BR&gt;ON SCHEDULE EVERY 24 HOUR&lt;BR&gt;STARTS '2023-10-30 08:36:56.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO delete from   coin&lt;BR&gt;where  date &lt;= date_add(now(), interval -3 day);&lt;BR&gt;&lt;BR&gt;DROP EVENT if exists create_coin_slope_gap_event;&lt;BR&gt;&lt;BR&gt;CREATE EVENT create_coin_slope_gap_event&lt;BR&gt;ON SCHEDULE EVERY 24 HOUR&lt;BR&gt;STARTS '2024-09-08 01:00:00.000'&lt;BR&gt;ON COMPLETION NOT PRESERVE&lt;BR&gt;ENABLE&lt;BR&gt;DO&lt;BR&gt;insert into coin_slope_gap (code, date_time, gap, gap_ratio, gap_low, gap_ratio_low)&lt;BR&gt;select X.code, &lt;BR&gt;       X.pre_date_time, &lt;BR&gt;       avg(X.gap) as gap , &lt;BR&gt;       avg(X.gap_ratio) as gap_ratio, &lt;BR&gt;       avg(X.gap_low) as gap_low, &lt;BR&gt;       avg(X.gap_ratio_low) as gap_ratio_low&lt;BR&gt;from (&lt;BR&gt;select B.code, &lt;BR&gt;       concat(B.date,B.time) as date_time , &lt;BR&gt;       concat(A.date,A.time) as pre_date_time, &lt;BR&gt;       B.open, &lt;BR&gt;       B.close , &lt;BR&gt;       A.close as pre_price , &lt;BR&gt;       (B.close-A.close) as gap, &lt;BR&gt;       (B.close-A.close)/A.close as gap_ratio,&lt;BR&gt;       (A.low-B.low) as gap_low, &lt;BR&gt;       (A.low-B.low)/B.low as gap_ratio_low&lt;BR&gt;from (select code, date, time, date_format(date_add(str_to_date(concat(date,time),'%Y%m%d%H%i%S'), interval +5 minute),'%Y%m%d%H%i') as date_time , open, close , high, low&lt;BR&gt;from   coin&lt;BR&gt;where  date &gt;= date_format(date_add(now() , interval -1 day) , '%Y%m%d')&lt;BR&gt;and    gap_min = 10) A,&lt;BR&gt;(select code, date, time, substr(concat(date,time),1,12) as date_time , open , close , high, low&lt;BR&gt;from   coin&lt;BR&gt;where  date &gt;= date_format(date_add(now() , interval -1 day) , '%Y%m%d')&lt;BR&gt;and    gap_min = 10) B&lt;BR&gt;where A.code = B.code&lt;BR&gt;and   A.date_time = B.date_time   &lt;BR&gt;) X&lt;BR&gt;where not exists (select code, date_time &lt;BR&gt;from coin_slope_gap&lt;BR&gt;where code = X.code&lt;BR&gt;and   date_time = X.pre_date_time&lt;BR&gt;)&lt;BR&gt;group by X.code,X.pre_date_time ;&lt;BR&gt;" TYPE="SQL">
</createEvent><createFunction DATASOURCE="session.jndi" KIND="DATA" OWNER="sa" REMOTE="false" SERVICE_NAME="CREATE FUNCTION   IF NOT EXISTS GEN_KEY(prefix TINYTEXT) RETURNS tinytext CHARSET utf8&lt;BR&gt;RETURN(&lt;BR&gt;  SELECT CONCAT(prefix,'_',DATE_FORMAT(NOW(), '%Y%m%d%H%i%S') ,'_', FLOOR(RAND()*1000000000))&lt;BR&gt;)" TYPE="SQL">
</createFunction><createINTENT DATASOURCE="session.jndi" KIND="DATA" OWNER="sa" REMOTE="false" SERVICE_NAME="CREATE PROCEDURE   IF NOT EXISTS CREATE_INTENT(intent tinytext)&lt;BR&gt;BEGIN&lt;BR&gt;DECLARE tmp VARCHAR(50);&lt;BR&gt;DECLARE tmp2 VARCHAR(50);&lt;BR&gt;DECLARE tmp3 VARCHAR(50);&lt;BR&gt; SET tmp = GEN_KEY('IG');&lt;BR&gt; INSERT INTO INTENT_GROUP(IG_KEY, IG_NAME, IG_TAG)&lt;BR&gt; VALUES(tmp, intent,intent);&lt;BR&gt;    SET tmp2 = GEN_KEY('IT');&lt;BR&gt; INSERT INTO INTENT(IG_KEY, IT_KEY, IT_NAME, IT_DESC)&lt;BR&gt; VALUES(tmp, tmp2, intent,intent);&lt;BR&gt;    SET tmp3 = GEN_KEY('IS');&lt;BR&gt; INSERT INTO INTENT_SENTENCES(IS_KEY, IT_KEY, IS_SENTENCE)&lt;BR&gt; VALUES(tmp3, tmp2, intent);&lt;BR&gt;END&lt;BR&gt;" TYPE="SQL">
</createINTENT></createSP></xml>