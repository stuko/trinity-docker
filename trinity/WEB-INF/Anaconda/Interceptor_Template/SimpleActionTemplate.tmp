package com.stuko.anaconda.intercepter;

import bsh.EvalError;
import bsh.Interpreter;
import bsh.ParseException;
import bsh.TargetError;

import com.stuko.anaconda.Exception.ExceptionCenter;
import com.stuko.anaconda.business.BusinessData;
import com.stuko.anaconda.business.BusinessHelper;
import com.stuko.anaconda.front.RequestHelper;
import com.stuko.anaconda.intercepter.BusinessIntercepter;
import com.stuko.anaconda.intercepter.BusinessCollectionIntercepter;
import com.stuko.anaconda.intercepter.ActionIntercepter;
import com.stuko.anaconda.value.BlankField;
import com.stuko.anaconda.value.ReturnValue;
<@IMPORT>

public class <@NAME> extends ActionIntercepter
{

	public ReturnValue invokeAfterMethod(RequestHelper helper, BusinessData businessData, ReturnValue masterReturnValue) throws Exception
	{
		String FORWARD_PAGE = new String();
		ExceptionCenter.debug( "Simple ActionIntercepter Call After!!!");
		ReturnValue returnValue = new ReturnValue();
		try
		{
			BusinessData BusinessDataParameter = businessData;
			ReturnValue MasterReturnValue = masterReturnValue;
			ReturnValue LocalReturnValue = returnValue;
			RequestHelper Helper = helper;
			<@NAME> This = this;

			<@AFTER>

			returnValue.mBRtn = true;
			returnValue.mORtn = "AOP result is true and Continue process";
		}
		catch(Exception e)
		{
			returnValue.mBRtn = false;
			returnValue.mDesc = "AfterMethod Exception";
			ExceptionCenter.debug("AfterMethod Exception");
		    ExceptionCenter.catchException(e);
		    throw new Exception(e);
		}



		return returnValue;
	}

	public ReturnValue invokeBeforeMethod(RequestHelper helper,BusinessData businessData, ReturnValue masterReturnValue) throws Exception
	{
		String FORWARD_PAGE = new String();
		ExceptionCenter.debug( "Simple ActionIntercepter Call Before!!!");
		ReturnValue returnValue = new ReturnValue();
		try
		{
			BusinessData BusinessDataParameter = businessData;
			ReturnValue MasterReturnValue = masterReturnValue;
			ReturnValue LocalReturnValue = returnValue;
			RequestHelper Helper = helper;
			<@NAME> This = this;

			<@BEFORE>

			returnValue.mBRtn = true;
			returnValue.mORtn = "AOP result is true and Continue process";
		}
		catch(Exception e)
		{
			returnValue.mBRtn = false;
			returnValue.mDesc = "BeforeMethod Exception";
			ExceptionCenter.debug("BeforeMethod Exception");
		    ExceptionCenter.catchException(e);
		    throw new Exception(e);
		}



		return returnValue;
	}

}
